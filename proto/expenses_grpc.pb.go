// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/expenses.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExpensesService_CreateExpense_FullMethodName  = "/ExpensesService/CreateExpense"
	ExpensesService_GetHeatMapData_FullMethodName = "/ExpensesService/GetHeatMapData"
)

// ExpensesServiceClient is the client API for ExpensesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpensesServiceClient interface {
	CreateExpense(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateExpenseRequest, CreateExpenseResponse], error)
	GetHeatMapData(ctx context.Context, in *GetHeatMapDataRequest, opts ...grpc.CallOption) (*GetHeatMapDataResponse, error)
}

type expensesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpensesServiceClient(cc grpc.ClientConnInterface) ExpensesServiceClient {
	return &expensesServiceClient{cc}
}

func (c *expensesServiceClient) CreateExpense(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateExpenseRequest, CreateExpenseResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExpensesService_ServiceDesc.Streams[0], ExpensesService_CreateExpense_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateExpenseRequest, CreateExpenseResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExpensesService_CreateExpenseClient = grpc.ClientStreamingClient[CreateExpenseRequest, CreateExpenseResponse]

func (c *expensesServiceClient) GetHeatMapData(ctx context.Context, in *GetHeatMapDataRequest, opts ...grpc.CallOption) (*GetHeatMapDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHeatMapDataResponse)
	err := c.cc.Invoke(ctx, ExpensesService_GetHeatMapData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpensesServiceServer is the server API for ExpensesService service.
// All implementations must embed UnimplementedExpensesServiceServer
// for forward compatibility.
type ExpensesServiceServer interface {
	CreateExpense(grpc.ClientStreamingServer[CreateExpenseRequest, CreateExpenseResponse]) error
	GetHeatMapData(context.Context, *GetHeatMapDataRequest) (*GetHeatMapDataResponse, error)
	mustEmbedUnimplementedExpensesServiceServer()
}

// UnimplementedExpensesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExpensesServiceServer struct{}

func (UnimplementedExpensesServiceServer) CreateExpense(grpc.ClientStreamingServer[CreateExpenseRequest, CreateExpenseResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateExpense not implemented")
}
func (UnimplementedExpensesServiceServer) GetHeatMapData(context.Context, *GetHeatMapDataRequest) (*GetHeatMapDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeatMapData not implemented")
}
func (UnimplementedExpensesServiceServer) mustEmbedUnimplementedExpensesServiceServer() {}
func (UnimplementedExpensesServiceServer) testEmbeddedByValue()                         {}

// UnsafeExpensesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpensesServiceServer will
// result in compilation errors.
type UnsafeExpensesServiceServer interface {
	mustEmbedUnimplementedExpensesServiceServer()
}

func RegisterExpensesServiceServer(s grpc.ServiceRegistrar, srv ExpensesServiceServer) {
	// If the following call pancis, it indicates UnimplementedExpensesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExpensesService_ServiceDesc, srv)
}

func _ExpensesService_CreateExpense_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExpensesServiceServer).CreateExpense(&grpc.GenericServerStream[CreateExpenseRequest, CreateExpenseResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExpensesService_CreateExpenseServer = grpc.ClientStreamingServer[CreateExpenseRequest, CreateExpenseResponse]

func _ExpensesService_GetHeatMapData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeatMapDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpensesServiceServer).GetHeatMapData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpensesService_GetHeatMapData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpensesServiceServer).GetHeatMapData(ctx, req.(*GetHeatMapDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpensesService_ServiceDesc is the grpc.ServiceDesc for ExpensesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpensesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ExpensesService",
	HandlerType: (*ExpensesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeatMapData",
			Handler:    _ExpensesService_GetHeatMapData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateExpense",
			Handler:       _ExpensesService_CreateExpense_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/expenses.proto",
}
